# -*- mode: ruby -*-
# vi: set ft=ruby :


# build chef-server vm
# https://learn.chef.io/modules/manage-a-node-chef-server/ubuntu/bring-your-own-system/set-up-your-chef-server#/

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  #   contrib-stretch64 includes the virtualbox kernel modules saving us the
  #   the effort of installing additions ourselves
  config.vm.box = "bento/ubuntu-16.04"

  config.vm.hostname = 'chefserver.home'
  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  #  On MAC addresses:
  #   * When spinning up loads of test runs I don't want to exhaust my DHCP server
  #   * Virtualbox uses 08:00:27:xx.. ( they now use 0A:00:27:.. to me standards compliant)
  #     * second least significant bit as 1 means localy not universal management
  #       ( https://en.wikipedia.org/wiki/MAC_address#Address_details )
  #   * using 0E as thats standards compliane for local and should not interfere with Virtualbox
  #     ( https://stackoverflow.com/questions/12538162/setting-a-vms-mac-address-in-vagrant )
  config.vm.network "public_network", :mac=> "0E0027000002"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

#  #############################################################################
#  # Uncomment *AFTER* first vagrant up so the VBadditions has time to install #
#  #############################################################################
#  if File.exist?(".vagrant/machines/default/virtualbox/action_provision")
    config.vm.synced_folder "../../data", "/vagrant_data"
#  else
#    # hold off on the sync
#  end

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
     vb.memory = "4096"  # chef server needs 4gig apparently ( default is 1gig)
  end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL
    apt-get update                      && \
    apt-get upgrade -y                  && \
    cp /vagrant_data/authorized_keys /home/vagrant/.ssh/authorized_keys2 && \
    chown vagrant:vagrant /home/vagrant/.ssh/authorized_keys2 && \
    chmod 600 /home/vagrant/.ssh/authorized_keys2 &&\
    bash /vagrant/install-chef-server.sh
  SHELL


end
